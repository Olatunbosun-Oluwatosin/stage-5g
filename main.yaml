- hosts: hng
  become: yes
  become_method: sudo
  vars:
    git_branch: "devops"
    git_repo: "https://github.com/hngprojects/hng_boilerplate_php_laravel_web.git"
    local_repo: "/opt/stage_5b"
    venv: "venv"
    log_dir: "/var/log/stage_5b"
    postgres_cred_dir: "/var/secrets"
    ansible_python_interpreter: "/opt/stage_5b/venv/bin/python3"
    deploy_user: "hng"
    app_port: 3000
    nginx_port: 80
    postgres_db: "database"
    postgres_admin_user: "admin"
    postgres_admin_password: "passwd"
    
  tasks:
    - name: Configure Git safe directory as root
      command: git config --global --add safe.directory /opt/stage_5b

    - name: Clone the devops branch of the repository as root
      git:
        repo: "{{ git_repo }}"
        dest: "{{ local_repo }}"
        version: "{{ git_branch }}"
        force: yes
        update: yes

    - name: Install system dependencies
      apt:
        name:
          - git
          - php
          - php-cli
          - php-fpm
          - php-pgsql
          - redis-server
          - python3-pip
          - python3-venv
          - libpq-dev
        state: present
        update_cache: yes

    - name: Install Composer
      shell: |
        EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
        if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            >&2 echo 'ERROR: Invalid installer checksum'
            rm composer-setup.php
            exit 1
        fi
        php composer-setup.php --install-dir=/usr/local/bin --filename=composer
        rm composer-setup.php

    - name: Install PHP dependencies
      command: composer install
      args:
        chdir: "{{ local_repo }}"
      async: 1800
      poll: 60

    - name: Create a Python virtual environment
      command: python3 -m venv "{{ local_repo }}/venv"
      args:
        creates: "{{ local_repo }}/venv"

    - name: Install psycopg2 in the virtual environment
      command: "{{ local_repo }}/venv/bin/pip install psycopg2-binary"

    - name: Set up logging directory
      file:
        path: "{{ log_dir }}"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Configure stderr logging
      lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "^error_log"
        line: "error_log {{ log_dir }}/error.log;"

    - name: Configure stdout logging
      lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "^access_log"
        line: "access_log {{ log_dir }}/out.log;"

    - name: Install NGINX
      apt:
        name: nginx
        state: present
      when: ansible_os_family == 'Debian'

    - name: Create NGINX reverse proxy configuration
      template:
        src: nginx_reverse_proxy.j2
        dest: /etc/nginx/sites-available/reverse_proxy
      notify:
        - Reload NGINX

    - name: Enable NGINX reverse proxy site
      file:
        src: /etc/nginx/sites-available/reverse_proxy
        dest: /etc/nginx/sites-enabled/reverse_proxy
        state: link
        force: yes
      notify:
        - Reload NGINX

    - name: Remove default NGINX site if exists
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - Reload NGINX

    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: present
      register: install_postgres_output

    - name: Ensure PostgreSQL service is running
      service:
        name: postgresql
        state: started
        enabled: yes
      register: postgres_service_output

    - name: Create PostgreSQL database
      become: yes
      become_user: true
      community.postgresql.postgresql_db:
        name: "{{ postgres_db }}"
        state: present
      register: create_db_output

    - name: Create PostgreSQL admin user
      become: yes
      become_user: true
      community.postgresql.postgresql_user:
        name: "{{ postgres_admin_user }}"
        password: "{{ postgres_admin_password }}"
        db: "{{ postgres_db }}"
        priv: "ALL"
        state: present
      register: create_admin_user_output

    - name: Save PostgreSQL admin credentials to postgres_cred file
      copy:
        content: |
          DB_TYPE=postgresql
          DB_NAME={{ postgres_db }}
          DB_USER={{ postgres_admin_user }}
          DB_PASSWORD={{ postgres_admin_password }}
          DB_HOST="localhost"
          DB_PORT=5432
          DB_URL=postgresql://{{ postgres_admin_user }}:{{ postgres_admin_password }}@localhost:5432/{{ postgres_db }}
        dest: "{{ postgres_cred_dir }}/pg_pw.txt"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: "0600"

    - name: Save PostgreSQL credentials
      copy:
        dest: "{{ postgres_cred_dir }}/pg_pw.txt"
        content: "admin:{{ pg_user_password }}"
        owner: root
        group: root
        mode: '0600'
        
    - name: Start the application
      shell: nohup php artisan serve --host=127.0.0.1 --port=3000 > "{{ log_dir }}/app.log" 2>&1 &
      args:
        chdir: "{{ local_repo }}"
      async: 1800
      poll: 60

    - name: Add the Nginx signing key
      apt_key:
        url: https://nginx.org/keys/nginx_signing.key
        state: present

    - name: Add the Nginx APT repository
      apt_repository:
        repo: deb [arch=amd64] http://nginx.org/packages/ubuntu jammy nginx
        state: present
      register: nginx_repo_output

    - name: Update the APT cache
      apt:
        update_cache: yes

    - name: Install Nginx 1.26
      apt:
        name: nginx=1.26.0-1~jammy
        state: present
      register: install_nginx_output

    - name: Remove default Nginx site configuration
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify:
        - restart nginx

    - name: Create new default configuration from template
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/conf.d/default.conf
      notify:
        - restart nginx

  handlers:
    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
