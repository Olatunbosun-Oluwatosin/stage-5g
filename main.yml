- hosts: stage_5b
  become: yes
  vars:
    ansible_python_interpreter: /opt/stage_5b/venv/bin/python3
    postgres_password: 'yourpostgrespassword'  # Replace with your actual postgres password
    pg_user_password: 'yourpassword'  # Replace with your actual admin password

  tasks:
    - name: Configure Git safe directory as root
      command: git config --global --add safe.directory /opt/stage_5b

    - name: Clone the devops branch of the repository as root
      git:
        repo: 'https://github.com/hngprojects/hng_boilerplate_php_laravel_web.git'
        dest: /opt/stage_5b
        version: devops
        force: yes
        update: yes

    - name: Install system dependencies
      apt:
        name:
          - git
          - nginx
          - php
          - php-cli
          - php-fpm
          - php-pgsql
          - postgresql
          - redis-server
          - python3-pip
          - python3-venv
          - libpq-dev
        state: present
        update_cache: yes

    - name: Install Composer
      shell: |
        EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
        if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            >&2 echo 'ERROR: Invalid installer checksum'
            rm composer-setup.php
            exit 1
        fi
        php composer-setup.php --install-dir=/usr/local/bin --filename=composer
        rm composer-setup.php

    - name: Install PHP dependencies
      command: composer install
      args:
        chdir: /opt/stage_5b
      async: 1800
      poll: 60

    - name: Create a Python virtual environment
      command: python3 -m venv /opt/stage_5b/venv
      args:
        creates: /opt/stage_5b/venv

    - name: Install psycopg2 in the virtual environment
      command: /opt/stage_5b/venv/bin/pip install psycopg2-binary

    - name: Set up logging directory
      file:
        path: /var/log/stage_5b
        state: directory
        owner: hng
        group: hng
        mode: '0755'

    - name: Configure stderr logging
      lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "^error_log"
        line: "error_log /var/log/stage_5b/error.log;"

    - name: Configure stdout logging
      lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "^access_log"
        line: "access_log /var/log/stage_5b/out.log;"

    - name: Configure Nginx
      template:
        src: templates/nginx.conf.j2  # Ensure this file exists
        dest: /etc/nginx/sites-available/stage_5b

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/stage_5b
        dest: /etc/nginx/sites-enabled/stage_5b
        state: link

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
      ignore_errors: true

    - name: Fetch Nginx service status
      command: systemctl status nginx.service
      register: nginx_status
      ignore_errors: true

    - name: Fetch Nginx error logs
      command: journalctl -xeu nginx.service
      register: nginx_logs
      ignore_errors: true

    - debug:
        msg: "Nginx status: {{ nginx_status.stdout }}"

    - debug:
        msg: "Nginx logs: {{ nginx_logs.stdout }}"

    - name: Start the application
      shell: php artisan serve --host=127.0.0.1 --port=3000
      args:
        chdir: /opt/stage_5b
      async: 1800
      poll: 60

    - name: Update PostgreSQL authentication to md5
      lineinfile:
        path: /etc/postgresql/16/main/pg_hba.conf  # Adjust this path as needed
        regexp: '^local\s+all\s+postgres\s+peer$'
        line: 'local   all             postgres                                md5'
        state: present

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted

    - name: Set PostgreSQL password for postgres user
      postgresql_user:
        name: postgres
        password: "{{ postgres_password }}"
        login_unix_socket: "/var/run/postgresql"
        state: present
      become_user: postgres
      become: no

    - name: Create PostgreSQL user
      postgresql_user:
        name: admin
        password: "{{ pg_user_password }}"
        role_attr_flags: SUPERUSER
        login_unix_socket: "/var/run/postgresql"
        state: present

    - name: Save PostgreSQL credentials
      copy:
        dest: /var/secrets/pg_pw.txt
        content: "admin:{{ pg_user_password }}"
        owner: root
        group: root
        mode: '0600'
